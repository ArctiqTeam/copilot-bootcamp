{
    "version": "2021",
    "vulns": {
        "A01:2021": {
            "title": "Broken Access Control",
            "position": 1,
            "description": "Access control enforces policy such that users cannot act outside of their intended permissions. Failures typically lead to unauthorized information disclosure, modification, or destruction of all data or performing a business function outside the user's limits. "
        },
        "A02:2021": {
            "title": "Cryptographic Failures",
            "position": 2,
            "description": "Security best practices require secure cryptographic storage, transmission, and hashing of sensitive data. Cryptographic failures can allow attackers to bypass security features. These failures can lead to the exposure of sensitive data, such as passwords, credit card numbers, or session tokens."
        },
        "A03:2021": {
            "title": "Injection",
            "position": 3,
            "description": "Injection flaws, such as SQL, NoSQL, OS, and LDAP injection, occur when untrusted data is sent to an interpreter as part of a command or query. The attacker's hostile data can trick the interpreter into executing unintended commands or accessing data without proper authorization."
        },
        "A04:2021": {
            "title": "Insecure Design",
            "position": 4,
            "description": "Security architecture and design should be robust and defend against threats. Security design principles should be incorporated in the design, definition, and planning of the application. Security design principles should be incorporated in the design, definition, and planning of the application."
        },
        "A05:2021": {
            "title": "Security Misconfiguration",
            "position": 5,
            "description": "The application is not securely configured. This can happen at any level of an application stack, including the platform, web server, application server, database, framework, and custom code. Misconfigurations give attackers unauthorized access to system data."
        },
        "A06:2021": {
            "title": "Vulnerable and Outdated Components",
            "position": 6,
            "description": "Components, such as libraries, frameworks, and other software modules, run with the same privileges as the application. If a vulnerable component is exploited, such an attack can facilitate serious data loss or server takeover. Applications using components with known vulnerabilities may undermine application defenses and enable a range of possible attacks and impacts."
        },
        "A07:2021": {
            "title": "Identification and Authentication Failures",
            "position": 7,
            "description": "Effective authentication and session management are crucial for defending against attacks. Weaknesses arise if an application allows automated attacks like credential stuffing or brute force, uses default or weak passwords, or employs insecure password recovery methods. Additional risks include storing passwords in plain text or with weak encryption, lacking multi-factor authentication, exposing session IDs in URLs, reusing session identifiers post-login, or failing to properly invalidate sessions after logout or inactivity."
        },
        "A08:2021": {
            "title": "Software and Data Integrity Failures",
            "position": 8,
            "description": "Software and data integrity failures relate to code and infrastructure that does not protect against integrity violations. An example of this is where an application relies upon plugins, libraries, or modules from untrusted sources, repositories, and content delivery networks (CDNs). An insecure CI/CD pipeline can introduce the potential for unauthorized access, malicious code, or system compromise. Lastly, many applications now include auto-update functionality, where updates are downloaded without sufficient integrity verification and applied to the previously trusted application. Attackers could potentially upload their own updates to be distributed and run on all installations. Another example is where objects or data are encoded or serialized into a structure that an attacker can see and modify is vulnerable to insecure deserialization."
        },
        "A09:2021": {
            "title": "Security Logging and Monitoring Failures",
            "position": 9,
            "description": "Insufficient logging and monitoring occur when critical events (e.g., logins, failed logins, high-value transactions) are not recorded, log messages are inadequate or unclear, logs are not monitored for suspicious activity, or are stored only locally. It also includes scenarios where alerting thresholds and response processes are ineffective, penetration tests do not trigger alerts, or real-time detection and escalation of attacks are lacking. Additionally, vulnerabilities can arise if logging and alerting information is exposed to users or attackers."
        },
        "A10:2021": {
            "title": "Server-Side Request Forgery",
            "position": 10,
            "description": "SSRF flaws occur whenever a web application is fetching a remote resource without validating the user-supplied URL. It allows an attacker to coerce the application to send a crafted request to an unexpected destination, even when protected by a firewall, VPN, or another type of network access control list (ACL)."
        }
    }
}